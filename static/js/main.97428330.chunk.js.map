{"version":3,"sources":["components/Header.js","components/Book.js","utils/api.js","utils/helpers.js","components/EditForm.js","components/AddForm.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Book","handleRemoveBookClick","book","_this","removeBook","id","enableEditingClick","setEditing","this","className","title","author","type","onClick","Component","url","requestApiKey","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","cachedKey","apiKey","wrap","_context","prev","next","localStorage","getItem","console","log","abrupt","fetch","concat","then","response","json","result","key","sent","setItem","t0","stop","apply","arguments","sendRequest","_ref2","_callee2","params","limit","tryCount","qs","fullUrl","_ref3","status","message","_args2","_context2","length","undefined","query","objectSpread","entries","map","slicedToArray","value","encodeURIComponent","join","replace","objectWithoutProperties","_x","fetchBooks","_ref4","_callee3","_context3","op","addBook","_ref5","_callee4","_context4","_x2","_x3","_ref6","_callee5","_context5","_x4","updateBook","_ref7","_callee6","_context6","_x5","_x6","_x7","EditForm","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","event","preventDefault","state","apiModule","resp","updateBookInList","setInfoMessage","handleAbort","_this2","onSubmit","placeholder","onChange","setState","target","required","AddForm","addBookToList","BookList","books","components_Book","assign","InfoUpdate","text","App","prevState","toConsumableArray","bookListCopy","idx","findIndex","el","bookId","removeBookFromList","active","bookToEdit","editing","isError","infoMessage","window","alert","handleUpdateListClick","handleClearApiKeyClick","confirm","removeItem","filter","data","components_EditForm","components_AddForm","App_InfoUpdate","App_BookList","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97428330.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default props => (\r\n  <header>\r\n    <strong>BOKDATABASEN (byggd med JavaScript, React och AJAX)</strong>\r\n  </header>\r\n)\r\n","import React, { Component } from 'react'\r\n\r\nclass Book extends Component {\r\n\r\n  handleRemoveBookClick = () => {\r\n    const book = this.props;\r\n    book.removeBook(book.id);\r\n  };\r\n\r\n  enableEditingClick = () => {\r\n    const book = this.props;\r\n    book.setEditing(true, book);\r\n  };\r\n\r\n  render() {\r\n    const book = this.props;\r\n    return (\r\n      <li className=\"list-item list-group-item d-flex align-items-center\">\r\n        <strong className=\"title\">{book.title}</strong>\r\n        <div className=\"author\">{book.author}</div>\r\n        <div className=\"buttons\">\r\n          <button type=\"button\" className=\"btn btn-success\" onClick={this.enableEditingClick}>\r\n            Editera\r\n          </button>\r\n          <button type=\"button\" className=\"btn btn-danger\" onClick={this.handleRemoveBookClick}>\r\n            Ta bort\r\n          </button>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Book","import { getQueryString } from './helpers'\r\n\r\nexport const url = 'https://www.forverkliga.se/JavaScript/api/crud.php'\r\n\r\nexport function clearApiKey() {\r\n  localStorage.removeItem('apiKey');\r\n}\r\n\r\nconst requestApiKey = async () => {\r\n  const cachedKey = localStorage.getItem('apiKey')\r\n\r\n  if (cachedKey) {\r\n    console.log('Cached key ' + cachedKey + ' used!')\r\n    return cachedKey\r\n  } else {\r\n    try {\r\n      const apiKey = await fetch(`${url}?requestKey`)\r\n        .then(response => response.json())\r\n        .then(result => result.key)\r\n\r\n      localStorage.setItem('apiKey', apiKey)\r\n      console.log('New key ' + apiKey + ' used!')\r\n      return apiKey\r\n    } catch (err) {\r\n      console.log('Error fetching API key!')\r\n      return err\r\n    }\r\n  }\r\n}\r\n\r\nconst sendRequest = async (params, limit = 10, tryCount = 1) => {\r\n  const key = await requestApiKey()\r\n  const qs = getQueryString({\r\n    ...params,\r\n    key\r\n  })\r\n\r\n  const fullUrl = `${url}?${qs}`;\r\n  console.log('Request URL: ' + fullUrl);\r\n  const { status, message, ...response } = await fetch(fullUrl).then(\r\n    response => response.json()\r\n  )\r\n\r\n  if (status === 'success') {\r\n    return { ...response, status, tryCount }\r\n  } else if (limit > 0 && status === 'error') {\r\n    console.log('Retrying request. Limit=' + limit + ' Message=' + message);\r\n    return sendRequest(params, limit - 1, tryCount + 1)\r\n  } else {\r\n    return { status, message }\r\n  }\r\n}\r\n\r\nexport const fetchBooks = async () => {\r\n  const params = {\r\n    op: 'select'\r\n  }\r\n\r\n  return await sendRequest(params)\r\n}\r\n\r\nexport const addBook = async (title, author) => {\r\n  const params = {\r\n    op: 'insert',\r\n    title,\r\n    author\r\n  }\r\n\r\n  return await sendRequest(params)\r\n}\r\n\r\nexport const removeBook = async id => {\r\n  const params = {\r\n    id,\r\n    op: 'delete'\r\n  }\r\n\r\n  return await sendRequest(params)\r\n}\r\n\r\nexport const updateBook = async (id, title, author) => {\r\n  const params = {\r\n    id,\r\n    title,\r\n    author,\r\n    op: 'update'\r\n  }\r\n\r\n  return await sendRequest(params)\r\n}\r\n","export const getQueryString = query =>\r\n  Object.entries(query)\r\n    .map(\r\n      ([key, value]) =>\r\n        `${encodeURIComponent(key)}=${encodeURIComponent(value)}`\r\n    )\r\n    .join('&')\r\n    .replace(/%20/g, '+')\r\n","import React, { Component } from 'react'\r\nimport * as apiModule from '../utils/api.js'\r\n\r\nclass EditForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: this.props.book.title,\r\n      author: this.props.book.author,\r\n      id: this.props.book.id\r\n    };\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault(); // Prevent the normal HTML submit from taking place\r\n    let title = this.state.title;\r\n    let author = this.state.author;\r\n    let id = this.state.id;\r\n    console.log('Update book: Title: ' + title + ' Author: ' + author + ' ID: ' + id);\r\n\r\n    apiModule.updateBook(id, title, author).then(resp => {\r\n      if (resp.status === 'success') {\r\n        this.props.updateBookInList(id, title, author); // Callback to trigger update of book list\r\n        this.props.setEditing(false, {}); // Cancel editing mode\r\n        this.props.setInfoMessage('Boken har uppdaterats! Det krävdes ' + resp.tryCount + ' försök.');\r\n      } else {\r\n        this.props.setInfoMessage('Fel! Kunde inte uppdatera bok. Meddelande: ' + resp.message, true);\r\n      }\r\n    });\r\n  };\r\n\r\n  handleAbort = () => {\r\n    this.props.setEditing(false, {});\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"book-form col-6\" onSubmit={this.handleSubmit}>\r\n        <legend>Uppdatera information om boken</legend>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"title\"\r\n            placeholder=\"Ny titel\"\r\n            value={this.state.title}\r\n            onChange={event => this.setState({ title: event.target.value })}\r\n            required\r\n          />\r\n\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"author\"\r\n            placeholder=\"Ny författare\"\r\n            value={this.state.author}\r\n            onChange={event => this.setState({ author: event.target.value })}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-success\">\r\n          Uppdatera\r\n          </button>\r\n        <button type=\"button\" className=\"btn btn-danger btn-update-abort\" onClick={this.handleAbort}>\r\n          Avbryt\r\n          </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditForm","import React, { Component } from 'react'\r\nimport * as apiModule from '../utils/api.js'\r\n\r\nclass AddForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { title: '', author: '' };\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault(); // Prevent the normal HTML submit from taking place\r\n    let title = this.state.title;\r\n    let author = this.state.author;\r\n    console.log('Add book: Title: ' + title + ' Author: ' + author);\r\n\r\n    apiModule.addBook(title, author).then(resp => {\r\n      console.log('Add book response: ', resp);\r\n      if (resp.status === 'success') {\r\n        this.props.addBookToList(resp.id, title, author); // Callback to trigger update of book list\r\n        this.setState({ title: '', author: '' }); // Clear input fields        \r\n        this.props.setInfoMessage('Boken har lagts till! Det krävdes ' + resp.tryCount + ' försök.');\r\n      } else {\r\n        this.props.setInfoMessage('Fel! Kunde inte lägga till bok. Meddelande: ' + resp.message, true);\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"book-form col-6\" onSubmit={this.handleSubmit}>\r\n        <legend>Lägg till dina favoritböcker</legend>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"title\"\r\n            placeholder=\"Lägg till titel\"\r\n            value={this.state.title}\r\n            onChange={event => this.setState({ title: event.target.value })}\r\n            required\r\n          />\r\n\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"author\"\r\n            placeholder=\"Lägg till författare\"\r\n            value={this.state.author}\r\n            onChange={event => this.setState({ author: event.target.value })}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary btn-lg btn-block\">\r\n          Skicka\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddForm","import React, { Component } from 'react'\r\nimport Header from './components/Header'\r\nimport Book from './components/Book'\r\nimport EditForm from './components/EditForm'\r\nimport AddForm from './components/AddForm'\r\nimport * as apiModule from './utils/api.js'\r\n\r\n//-----------------------------------------------------------------------------\r\nconst BookList = (props) => (\r\n  <div>\r\n    {props.books.map(book =>\r\n      <Book {...props} key={book.id} {...book} />)}\r\n  </div>\r\n);\r\n\r\n//-----------------------------------------------------------------------------\r\nconst InfoUpdate = (props) => (\r\n  <div className=\"book-form col-6 info-box\">\r\n    {props.text}\r\n  </div>\r\n);\r\n\r\n//-----------------------------------------------------------------------------\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      books: [], // The list of books. Will be populated via the Rest API.\r\n      editing: false, // Is book editing mode enabled?\r\n      bookToEdit: {}, // Holds book to edit (if editing mode enabled).\r\n      infoMessage: 'Välkommen till bokdatabasen!', // Message to display in page info box\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add new book to the visible list without having to fetch the whole list again.\r\n   * @param {number} id The ID of the book to add.\r\n   * @param {string} title The title of the book to add.\r\n   * @param {string} author The author of the book to add.\r\n   */\r\n  addBookToList = (id, title, author) => {\r\n    this.setState(prevState => ({\r\n      books: [...prevState.books, { id, title, author }] // Append new book\r\n    }))\r\n  };\r\n\r\n  /**\r\n   * Update a book in the visible list without having to fetch the whole list again.\r\n   * @param {number} id The ID of the book to update.\r\n   * @param {string} title The (new) title of the book to update.\r\n   * @param {string} author The (new) author of the book to update.\r\n   */\r\n  updateBookInList = (id, title, author) => {\r\n    this.setState(prevState => {\r\n      let bookListCopy = [...prevState.books];\r\n      let idx = bookListCopy.findIndex(el => el.id === id);\r\n      if (idx >= 0) {\r\n        bookListCopy[idx].title = title;\r\n        bookListCopy[idx].author = author;\r\n      }\r\n      return { books: bookListCopy }\r\n    })\r\n  };\r\n\r\n  /**\r\n   * Remove a book from the visible list without having to fetch the whole list again.\r\n   * @param {number} id The ID of the book to remove.\r\n   */\r\n  removeBookFromList(id) {\r\n    this.setState(prevState => ({\r\n      books: prevState.books.filter(el => el.id !== id)\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Remove a book from the database via the Rest API.\r\n   * @param {number} bookId The ID of the book to remove.\r\n   */\r\n  removeBook = (bookId) => {\r\n    apiModule.removeBook(bookId).then(resp => {\r\n      if (resp.status === 'success') {\r\n        this.removeBookFromList(bookId);\r\n        this.setInfoMessage('Boken har tagits bort! Det krävdes ' + resp.tryCount + ' försök.');\r\n      } else {\r\n        this.setInfoMessage('Fel! Kunde inte ta bort boken. Meddelande: ' + resp.message, true);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Fetch list of books from the database via the Rest API.\r\n   */\r\n  fetchBooks() {\r\n    apiModule.fetchBooks().then(resp => {\r\n      console.log('fetchBooks() response: ', resp);\r\n      if (resp.status === 'success') {\r\n        this.setState({\r\n          books: resp.data\r\n        });\r\n        this.setInfoMessage('Boklistan har uppdaterats! Det krävdes ' + resp.tryCount + ' försök.');\r\n      } else {\r\n        this.setInfoMessage('Fel! Kunde inte uppdatera boklistan. Meddelande: ' + resp.message, true);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the book editing form.\r\n   * @param {boolean} active If true, editing mode is activated. If false, it is deactivated.\r\n   * @param {Book} book The book to edit (if editing mode is activated).\r\n   */\r\n  setEditing = (active, book) => {\r\n    this.setState(() => ({\r\n      bookToEdit: book,\r\n      editing: active\r\n    }))\r\n  };\r\n\r\n  /**\r\n   * Set the message to display in the information box. On error, a popup alert will also be displayed.\r\n   * @param {string} message Message to display.\r\n   * @param {boolean} isError Set to true to indicate that it is an error message. Default false.\r\n   */\r\n  setInfoMessage = (message, isError = false) => {\r\n    this.setState({\r\n      infoMessage: message,\r\n    });\r\n    if (isError) {\r\n      window.alert(message);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * After all the elements of the page is rendered correctly, this method is called to fetch the list of books.\r\n   */\r\n  componentDidMount() {\r\n    this.fetchBooks();\r\n  }\r\n\r\n  handleUpdateListClick = () => {\r\n    this.fetchBooks();\r\n  }\r\n\r\n  handleClearApiKeyClick = () => {\r\n    if (window.confirm('Varning! Om du fortsätter kommer den gamla databasen inte längre vara tillgänglig.')) {\r\n      apiModule.clearApiKey();\r\n      this.setInfoMessage('API-nyckeln har nollställts!');\r\n      this.setState({\r\n        books: []\r\n      });\r\n    } else {\r\n      this.setInfoMessage('Operationen avbröts.');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <div className=\"container\">\r\n          <div className=\"row form-section\">\r\n            {this.state.editing ? (\r\n              <EditForm updateBookInList={this.updateBookInList} setEditing={this.setEditing}\r\n                book={this.state.bookToEdit} setInfoMessage={this.setInfoMessage} />\r\n            ) : (\r\n                <AddForm addBookToList={this.addBookToList} setInfoMessage={this.setInfoMessage} />\r\n              )}\r\n          </div>\r\n          <InfoUpdate text={this.state.infoMessage} />\r\n        </div>\r\n        <div className=\"display-books\">\r\n          <div className=\"container\">\r\n            <ul className=\"list-group\">\r\n              <li className=\"list-item list-group-item d-flex align-items-center list-heading\">\r\n                <strong className=\"title\">Titel</strong>\r\n                <strong className=\"author\">Författare</strong>\r\n                <div className=\"buttons\">\r\n                  <button type=\"button\" className=\"btn btn-success\" onClick={this.handleUpdateListClick}>\r\n                    Uppdatera lista\r\n                  </button>\r\n                  <button type=\"button\" className=\"btn btn-danger\" onClick={this.handleClearApiKeyClick}>\r\n                    Rensa API-nyckel\r\n                  </button>\r\n                </div>\r\n              </li>\r\n              <BookList books={this.state.books} removeBook={this.removeBook} setEditing={this.setEditing} />\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './css/bootstrap.min.css'\r\nimport './css/index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}